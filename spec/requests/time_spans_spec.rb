require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/collection/:id/time_spans", type: :request do
  # TimeSpan. As you add validations to TimeSpan, be sure to
  # adjust the attributes here as well.
  let(:collection) {
    collections(:collection1)
  }

  let(:valid_attributes) {
    {
      subject_id: works(:work1).id,
      subject_type: "Work",
      collection_id: collection.id,
      status: "concept",
      starts_at: Time.now,
      classification: "rental_outgoing"
    }
  }

  let(:invalid_attributes) {
    {
      subject_id: works(:work1).id,
      subject_type: "Work",
      collection_id: collection.id,
      status: "invalid",
      starts_at: Time.now,
      classification: "rental_outgoing"
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      TimeSpan.create! valid_attributes
      get collection_time_spans_url(collection)
      expect(response).to be_redirect
    end
    it "renders a successful response form" do
      sign_in users(:admin)

      TimeSpan.create! valid_attributes
      get collection_time_spans_url(collection)
      expect(response).to be_successful
    end

    it "renders an authorized response for advisor" do
      sign_in users(:advisor)

      TimeSpan.create! valid_attributes
      get collection_time_spans_url(collection)
      expect(response).to be_successful
    end

    it "renders an unauthorized response for registrator" do
      sign_in users(:qkunst)

      TimeSpan.create! valid_attributes
      get collection_time_spans_url(collection)
      expect(response).to be_redirect
    end
  end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     sign_in users(:admin)
  #     time_span = TimeSpan.create! valid_attributes
  #     get collection_time_span_url(collection, time_span)
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_time_span_url
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe "GET /edit" do
  #   it "render a successful response" do
  #     time_span = TimeSpan.create! valid_attributes
  #     get edit_time_span_url(time_span)
  #     expect(response).to be_successful
  #   end
  # end
  #
  describe "POST /create" do
    context "as admin" do
      before do
        sign_in users(:admin)
      end

      context "with valid parameters and a workset" do
        let(:work_set) { work_sets(:work_set_collection1) }
        let(:valid_attributes) {
          {
            status: "active",
            starts_at: Time.now,
            classification: "rental_outgoing"
          }
        }

        it "creates a new TimeSpan" do
          expect {
            post collection_work_set_time_spans_url(collection, work_set), params: {time_span: valid_attributes}
          }.to change(TimeSpan, :count).by(1 + work_set.works.count)
        end

        it "redirects to the created time_span" do
          post collection_work_set_time_spans_url(collection, work_set), params: {time_span: valid_attributes}
          expect(response).to redirect_to(collection_work_set_url(collection, work_set))
        end
      end

      context "with invalid parameters" do
        let(:work_set) { work_sets(:work_set_collection1) }

        it "does not create a new TimeSpan" do
          expect {
            post collection_work_set_time_spans_url(collection, work_set), params: {time_span: invalid_attributes}
          }.to change(TimeSpan, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post collection_work_set_time_spans_url(collection, work_set), params: {time_span: invalid_attributes}
          expect(response.body).to match("Verbeter de volgende problemen")
          expect(response.status).to eq(422)
        end
      end
    end
  end
  #
  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }
  #
  #     it "updates the requested time_span" do
  #       time_span = TimeSpan.create! valid_attributes
  #       patch time_span_url(time_span), params: { time_span: new_attributes }
  #       time_span.reload
  #       skip("Add assertions for updated state")
  #     end
  #
  #     it "redirects to the time_span" do
  #       time_span = TimeSpan.create! valid_attributes
  #       patch time_span_url(time_span), params: { time_span: new_attributes }
  #       time_span.reload
  #       expect(response).to redirect_to(time_span_url(time_span))
  #     end
  #   end
  #
  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       time_span = TimeSpan.create! valid_attributes
  #       patch time_span_url(time_span), params: { time_span: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end
  #
  # describe "DELETE /destroy" do
  #   it "destroys the requested time_span" do
  #     time_span = TimeSpan.create! valid_attributes
  #     expect {
  #       delete time_span_url(time_span)
  #     }.to change(TimeSpan, :count).by(-1)
  #   end
  #
  #   it "redirects to the time_spans list" do
  #     time_span = TimeSpan.create! valid_attributes
  #     delete time_span_url(time_span)
  #     expect(response).to redirect_to(time_spans_url)
  #   end
  # end
end
