require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contacts", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:collection) {
    collections(:collection1)
  }
  let(:contact) {
    contacts(:contact_internal)
  }

  let(:valid_attributes) {
    {
      name: "Someone",
      collection_id: collection.id
    }
  }

  let(:invalid_attributes) {
    {
      a: 2,
      name: ""
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Contact.create! valid_attributes
      get collection_contacts_url(collection)
      expect(response).to be_redirect

      sign_in users(:admin)

      get collection_contacts_url(collection)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      contact = Contact.create! valid_attributes
      get collection_contact_url(collection, contact)
      expect(response).to be_redirect

      sign_in users(:admin)

      get collection_contact_url(collection, contact)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in users(:admin)

      get new_collection_contact_url(collection)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "doesn't allow for an anonymous request" do
      contact = contacts(:contact_internal)
      get edit_collection_contact_url(collection,contact)
      expect(response).to be_redirect
    end

    it "doesn't allow a user without acces to the collection to edit the contact" do
      sign_in users(:advisor_user_with_api_key)

      expect{
        get edit_collection_contact_url(collections(:collection_with_works),contact)
      }.to raise_error(ActiveRecord::RecordNotFound)
    end

    it "does allow an advisor with access to the collection to edit the the contact" do
      sign_in users(:advisor_user_with_api_key)
      valid_contact = contacts(:contact_internal_at_collection_with_works)

      get edit_collection_contact_url(valid_contact.collection,valid_contact.id)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Contact" do
        expect {
          post collection_contacts_url(collections(:collection_with_works)), params: { contact: valid_attributes }
        }.to change(Contact, :count).by(0)
      end

      it "redirects to the created contact" do
        sign_in users(:advisor_user_with_api_key)

        post collection_contacts_url(collections(:collection_with_works)), params: { contact: valid_attributes }
        expect(response).to redirect_to(collection_contact_url(collections(:collection_with_works),collections(:collection_with_works).contacts.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contact" do
        sign_in users(:advisor_user_with_api_key)

        expect {
          post collection_contacts_url(collections(:collection_with_works)), params: { contact: invalid_attributes }
        }.to change(Contact, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Someone Better",
          collection_id: collection.id
        }
      }

      it "updates the requested contact" do
        sign_in users(:admin)
        contact = Contact.create! valid_attributes
        patch collection_contact_url(collection, contact), params: { contact: new_attributes }
        contact.reload
        expect(contact.name).to eql("Someone Better")
      end

      it "redirects to the contact" do
        sign_in users(:admin)
        contact = Contact.create! valid_attributes
        patch collection_contact_url(collection, contact), params: { contact: new_attributes }
        contact.reload
        expect(response).to redirect_to([collection, contact])
      end
    end

  end

  describe "DELETE /destroy" do
    it "destroys the requested contact" do
      sign_in users(:admin)

      expect {
        delete collection_contact_url(collection, contact)
      }.to change(Contact, :count).by(-1)
    end

    it "redirects to the contacts list" do
      sign_in users(:admin)

      delete collection_contact_url(collection, contact)
      expect(response).to redirect_to(collection_contacts_url(collection))
    end
  end
end
