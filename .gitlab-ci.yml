# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Ruby.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/ruby/tags/
image: ruby:3.0

variables:
# Configure postgres service (https://hub.docker.com/_/postgres/)
 POSTGRES_DB: gitlabci
 POSTGRES_USER: gitlabci
 POSTGRES_PASSWORD: gitlabci

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# variables:
#   POSTGRES_DB: database_name

# Cache gems in between builds
cache:
  paths:
    - vendor/ruby
    - .nvm
    - node_modules

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
# before_script:
#   - ruby -v  # Print out ruby version for debugging
#   # Uncomment next line if your rails app needs a JS runtime:
#   # - apt-get update -q # && apt-get install wget -yqq
#   - export HOME="/builds/murb-org/collectiemanagement"
#   - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
#   - bundle config set path 'vendor' # Install dependencies into ./vendor/ruby
#   - bundle install -j $(nproc)
#   - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
#   - nvm install
#   - npm install yarn -g
#   - yarn install

# Optional - Delete if not using `rubocop`
# rubocop:
#   script:
    # - rubocop

# test:
#   script:
#     - bundle exec rails db:migrate
#     - bundle exec rails db:seed
#     - bundle exec rails webpacker:compile
#     - bundle exec rails spec


test:
  only:
    - main
  before_script:
    - curl -sL https://deb.nodesource.com/setup_12.x | bash -
    - apt-get update -qq && apt-get install -y -qq nodejs
    - ruby -v
    - which ruby
    - gem install bundler
    - bundle install --path=cache/bundler --without production --jobs $(nproc) "${FLAGS[@]}"
    - bundle exec rails db:setup RAILS_ENV=gitlabci
    - bundle exec rails db:migrate RAILS_ENV=gitlabci
    - RAILS_ENV=gitlabci bundle exec rails elastic:rebuild_all
    - npm install -g yarn
  services:
    - name: "docker.elastic.co/elasticsearch/elasticsearch:7.13.2"
      alias: "elasticsearch"
      command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    - redis:alpine
    - postgres:11
  script:
    - node --version
    - yarn install --frozen-lockfile --cache-folder .yarn-cache
    - bundle exec rails assets:precompile
    - RAILS_ENV=gitlabci bundle exec rspec 2>/dev/null || true
    - RAILS_ENV=gitlabci bundle exec rspec
  artifacts:
    expire_in: 7d
    paths:
      - public/assets
      - log/


# test:
#   before_script:
#     - ruby -v  # Print out ruby version for debugging
#     # Uncomment next line if your rails app needs a JS runtime:
#     - apt-get update -q # && apt-get install wget -yqq
#     - apt-get install postgresql apt-transport-https -y
#     - pg_ctlcluster 13 main start
#     - pg_ctlcluster 13 main status
#     - export SQL_COMMAND="CREATE USER qkunst WITH PASSWORD 'VerySecurePassword';" && runuser -l postgres -c "psql -c \"$SQL_COMMAND\""
#     - runuser -l postgres -c 'createdb -O qkunst qkunst-test'
#     - export HOME="/builds/murb-org/collectiemanagement"
#     - wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
#     - echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | tee /etc/apt/sources.list.d/elastic-8.x.list
#     - apt-get update && apt-get install elasticsearch -y
#     - /usr/share/elasticsearch/bin/elasticsearch-users useradd gitlab -p PleaseChangeMe -r admin
#     - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
#     - bundle config set path 'vendor' # Install dependencies into ./vendor/ruby
#     - bundle install -j $(nproc)
#     - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use
#     - nvm install
#     - npm install yarn -g
#     - yarn install
#   script:
#     - RAILS_ENV=gitlab bundle exec rails db:migrate
#     - RAILS_ENV=gitlab bundle exec rails db:seed
#     - RAILS_ENV=gitlab bundle exec rails webpacker:compile
#     - RAILS_ENV=gitlab bundle exec rspec

bundleaudit:
  script:
    - gem install bundler-audit
    - bundle audit

brakeman:
  script:
    - gem install brakeman
    - brakeman -i config/brakeman.ignore